package main

import (
	"encoding/base64"
	"fmt"
	"nitro/attest/attestation"
	"time"
)

func main() {
	for {
		nonce, err := attestation.CreateNonce(time.Second * 1) // temporary
		attestation.LogIfError(err)
		fmt.Println("Generating keypair")
		xpub, err := attestation.GetXpub()
		attestation.LogIfError(err)
		userData := []byte{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11} // sample userData
		fmt.Println("Generating attestation doc")
		doc, err := attestation.GetDoc(nonce.Value, userData, xpub)
		attestation.LogIfError(err)
		fmt.Printf("doc: %v\n", base64.StdEncoding.EncodeToString(doc))

		time.Sleep(5 * time.Second)
	}
}

//doc := "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"
//resJSON, err := verify.VerifyAttestation(doc, time.Now())
//verify.LogIfError("attestation verification failed with error", err)
//verify.PrintJSON(resJSON)
