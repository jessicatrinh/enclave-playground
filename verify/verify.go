package main

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/elliptic"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/hf/nitrite"
	"math/big"
	"os"
	"time"
)

var (
	curve     = elliptic.P256()
	xprvBytes = []byte{125, 69, 120, 148, 179, 28, 104, 76, 218, 252, 117, 242, 242, 89, 207, 219, 161, 5, 202, 182, 55, 131, 177, 221, 41, 171, 238, 166, 103, 107, 88, 14}
	xpubBytes = []byte{4, 121, 59, 21, 227, 73, 177, 109, 134, 75, 247, 214, 143, 37, 81, 160, 22, 203, 2, 86, 206, 217, 129, 18, 52, 130, 181, 40, 118, 21, 44, 33, 139, 220, 16, 84, 76, 213, 145, 4, 5, 182, 103, 235, 0, 1, 176, 191, 194, 252, 13, 16, 104, 156, 255, 65, 217, 6, 135, 51, 43, 66, 208, 6, 173}
	doc       = "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"
)

func main() {
	decodedDoc, err := base64.StdEncoding.DecodeString(doc)
	logIfError("provided attestation document is not encoded as a valid standard Base64 string", err)
	resJSON, err := verifyAttestation(decodedDoc)
	logIfError("attestation verification failed with error", err)
	printJSON(resJSON)
	//fmt.Printf("%v\n", resJSON)
	xprv := getKeypair()
	fmt.Println("xprv:", xprv)
	fmt.Println("Main finished gracefully.")
}

func verifyAttestation(attestation []byte) (string, error) {
	res, err := nitrite.Verify(
		attestation,
		nitrite.VerifyOptions{
			CurrentTime: time.Now(),
		})
	resJSON := ""
	if res != nil {
		enc, err := json.Marshal(res.Document)
		if err != nil {
			return "", err
		}
		resJSON = string(enc)
	}
	if err != nil {
		return "", err
	}
	return resJSON, nil
}

func getKeypair() *ecdsa.PrivateKey {
	x, y := elliptic.Unmarshal(curve, xpubBytes)
	return &ecdsa.PrivateKey{
		PublicKey: ecdsa.PublicKey{
			Curve: curve,
			X:     x,
			Y:     y,
		},
		D: big.NewInt(0).SetBytes(xprvBytes),
	}
}

// HELPERS:

func logIfError(msg string, e error) {
	if e != nil {
		fmt.Printf("%s: %v\n", msg, e)
		os.Exit(1)
	}
}

func printJSON(str string) {
	var prettyJSON bytes.Buffer
	err := json.Indent(&prettyJSON, []byte(str), "", "    ")
	logIfError("could not print JSON nicely", err)
	fmt.Println(prettyJSON.String())
}
