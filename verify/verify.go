package main

import (
	"encoding/base64"
	"fmt"
	"github.com/hf/nitrite"
	"time"
)

func verifyAttestation(attestation []byte) error {
	res, err := nitrite.Verify(
		attestation,
		//bytes.NewReader(attestation),
		nitrite.VerifyOptions{
			CurrentTime: time.Now(),
		})
	if nil != err {
		return err
	}
	fmt.Println("res:", res)
	return nil
}

func main() {
	doc := "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"
	decodedDoc, err := base64.StdEncoding.DecodeString(doc)
	if err != nil {
		logIfError(err)
	}
	err = verifyAttestation(decodedDoc)
	if err != nil {
		logIfError(err)
	}

	fmt.Println("Main finished gracefully.")
}

func logIfError(e error) {
	if e != nil {
		fmt.Printf("error: %v\n", e)
	}
}
