package main

import (
	"bytes"
	"crypto/x509"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"github.com/cloudflare/cfssl/revoke"
	"github.com/hf/nitrite"
	"os"
	"time"
)

// var doc = "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"
var doc = "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"

func main() {
	decodedDoc, err := base64.StdEncoding.DecodeString(doc)
	logIfError("provided attestation document is not encoded as a valid standard Base64 string", err)
	resJSON, err := verifyAttestation(decodedDoc)
	logIfError("attestation verification failed with error", err)
	printJSON(resJSON)
}

// checkRevokedCert checks for revoked certificates (revocation checks are NOT performed by nitrite)
func checkRevokedCert(certs []*x509.Certificate) {
	for index, cert := range certs {
		// VerifyCertificate ensures that the certificate passed in hasn't expired and checks the CRL for the server
		if revoked, ok := revoke.VerifyCertificate(cert); !ok {
			fmt.Fprintf(os.Stderr, "warning: soft fail checking revocation")
		} else if revoked {
			fmt.Printf("certificate %d was revoked", index)
			os.Exit(1)
		}
	}
}

// verifyAttestation validates the signature and certificate
func verifyAttestation(attestation []byte) (string, error) {
	res, err := nitrite.Verify(
		attestation,
		// If the options specify `Roots` as `nil`, the `DefaultCARoot` will be used.
		nitrite.VerifyOptions{
			CurrentTime: time.Now(),
		})
	resJSON := ""
	if res != nil {
		enc, err := json.Marshal(res.Document)
		if err != nil {
			return "", err
		}
		resJSON = string(enc)
	}
	if err != nil {
		return "", err
	}
	checkRevokedCert(res.Certificates)
	return resJSON, nil
}

// HELPERS:

func logIfError(msg string, e error) {
	if e != nil {
		fmt.Printf("%s: %v\n", msg, e)
		os.Exit(1)
	}
}

func printJSON(str string) {
	var prettyJSON bytes.Buffer
	err := json.Indent(&prettyJSON, []byte(str), "", "    ")
	logIfError("could not print JSON nicely", err)
	fmt.Println(prettyJSON.String())
}
